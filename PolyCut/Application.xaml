<Application x:Class="Application"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:PolyCut"
             xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
              xmlns:uic="clr-namespace:Wpf.Ui.Converters;assembly=Wpf.Ui" xmlns:c="clr-namespace:ValueConverters;assembly=ValueConverters" xmlns:system="clr-namespace:System;assembly=mscorlib"
             Startup="OnStartup" DispatcherUnhandledException="OnDispatcherUnhandledException"
             Exit="OnExit">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ui:ControlsDictionary  />

                <ResourceDictionary Source="pack://application:,,,/Wpf.Ui;component/Resources/Theme/Dark.xaml" />
                <ResourceDictionary Source="pack://application:,,,/Wpf.Ui;component/Resources/Wpf.Ui.xaml" />
                <ResourceDictionary Source="pack://application:,,,/PolyCut.RichCanvas;component/Themes/Generic.xaml" />
                
                <ResourceDictionary>
                    <local:ZoomFactorToThicknessConverter x:Key="ZoomFactorToThicknessConverter" />
                    <c:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
                    <local:InputToMillimetresConverter x:Key="UnitConverter" />
                    <local:AnimationFactorToValueConverter x:Key="AnimationFactorToValueConverter" />
                    <local:InverseBoolToVisConverter x:Key="InverseBoolToVisConverter" />
                    <local:NullableIntConverter x:Key="NullableIntConverter" />
                    <local:RadioButtonConverter x:Key="RadioButtonConverter" />
                    <local:PathTrimmerConverter x:Key="PathTrimmerConverter" />
                    <local:InverseBoolConverter x:Key="InverseBoolConverter" />
                    <local:ComparisonConverter x:Key="ComparisonConverter" />
                    <local:CanvasToolModeCursorConverter x:Key="CanvasToolModeCursorConverter" />
                    <local:SelectedObjectIsTextboxToVisConverter x:Key="SelectedObjectIsTextboxToVisConverter" />
                    <c:NullToBoolConverter x:Key="NullToBoolConverter" IsInverted="True" />
                </ResourceDictionary>

                <ResourceDictionary>
                    <Style x:Key="CustomCardExpanderStyle"
               BasedOn="{StaticResource DefaultUiCardExpanderStyle}"
               TargetType="{x:Type ui:CardExpander}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ui:CardExpander}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>

                                        <!--  Top level controls always visible  -->
                                        <Border x:Name="ToggleButtonBorder"
                                    Grid.Row="0"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="1"
                                    CornerRadius="{TemplateBinding CornerRadius}">
                                            <ToggleButton x:Name="ExpanderToggleButton"
                                              Margin="0"
                                              Padding="{TemplateBinding Padding}"
                                              HorizontalAlignment="Stretch"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalContentAlignment="Stretch" VerticalContentAlignment="Center"
                                              FontSize="{TemplateBinding FontSize}"
                                              Foreground="{TemplateBinding Foreground}"
                                              IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                              IsEnabled="{TemplateBinding IsEnabled}"
                                              OverridesDefaultStyle="True"
                                              Template="{StaticResource DefaultUiCardExpanderToggleButtonStyle}">
                                                <ToggleButton.Content>
                                                    <Grid>
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="Auto" />
                                                            <ColumnDefinition Width="*" />
                                                        </Grid.ColumnDefinitions>

                                                        <ContentControl x:Name="ControlIcon"
                                                            Content="{TemplateBinding Icon}"
                                                            Grid.Column="0"
                                                            Margin="{StaticResource CardExpanderIconMargin}"
                                                            VerticalAlignment="Center"
                                                            Focusable="False"
                                                            FontSize="{StaticResource CardExpanderIconSize}"
                                                            Foreground="{TemplateBinding Foreground}"
                                                            KeyboardNavigation.IsTabStop="False" />

                                                        <ContentPresenter x:Name="HeaderContentPresenter"
                                                              Content="{TemplateBinding Header}"
                                                              Grid.Column="1"
                                                              TextElement.Foreground="{TemplateBinding Foreground}" />
                                                    </Grid>
                                                </ToggleButton.Content>
                                            </ToggleButton>
                                        </Border>

                                        <!--  Collapsed content to expand  -->
                                        <Grid Grid.Row="1" ClipToBounds="True">
                                            <Border x:Name="ContentPresenterBorder"
                                        Background="Transparent"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="1,0,1,1" CornerRadius="0,0,4,4" Visibility="Collapsed">
                                                <ContentPresenter x:Name="ContentPresenter"
                                                      Content="{TemplateBinding Content}"
                                                      Margin="{TemplateBinding ContentPadding}"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                                <Border.Tag>
                                                    <system:Double>0.0</system:Double>
                                                </Border.Tag>
                                                <Border.RenderTransform>
                                                    <TranslateTransform>
                                                        <TranslateTransform.Y>
                                                            <MultiBinding Converter="{StaticResource AnimationFactorToValueConverter}" ConverterParameter="negative">
                                                                <Binding ElementName="ContentPresenterBorder" Path="ActualHeight" />
                                                                <Binding ElementName="ContentPresenterBorder" Path="Tag" />
                                                            </MultiBinding>
                                                        </TranslateTransform.Y>
                                                    </TranslateTransform>
                                                </Border.RenderTransform>
                                            </Border>
                                        </Grid>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsExpanded" Value="True">
                                            <!--  TODO: Update  -->
                                            <Setter TargetName="ToggleButtonBorder" Property="CornerRadius" Value="4,4,0,0" />
                                            <Trigger.EnterActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterBorder" Storyboard.TargetProperty="(Border.Visibility)">
                                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                                        </ObjectAnimationUsingKeyFrames>
                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterBorder" Storyboard.TargetProperty="Tag">
                                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="1.0" />
                                                            <SplineDoubleKeyFrame KeySpline="0.0, 0.0, 0.0, 1.0" KeyTime="0:0:0.333"
                                                                      Value="0.0" />
                                                        </DoubleAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </Trigger.EnterActions>
                                            <Trigger.ExitActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterBorder" Storyboard.TargetProperty="(Border.Visibility)">
                                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="{x:Static Visibility.Collapsed}" />
                                                        </ObjectAnimationUsingKeyFrames>
                                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenterBorder" Storyboard.TargetProperty="Tag">
                                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="0.0" />
                                                            <SplineDoubleKeyFrame KeySpline="1.0, 1.0, 0.0, 1.0" KeyTime="0:0:0.167"
                                                                      Value="1.0" />
                                                        </DoubleAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </Trigger.ExitActions>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Background" Value="{DynamicResource CardBackgroundDisabled}" />
                                            <Setter Property="BorderBrush" Value="{DynamicResource CardBorderBrushDisabled}" />
                                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource CardForegroundDisabled}" />
                                            <Setter TargetName="ExpanderToggleButton" Property="Foreground" Value="{DynamicResource CardForegroundDisabled}" />
                                        </Trigger>
                                        <Trigger Property="Icon" Value="{x:Null}">
                                            <Setter TargetName="ControlIcon" Property="Margin" Value="0" />
                                            <Setter TargetName="ControlIcon" Property="Visibility" Value="Collapsed" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="CustomTabStyle"
               BasedOn="{StaticResource {x:Type TabItem}}"
               TargetType="{x:Type TabItem}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type TabItem}">
                                    <Grid x:Name="Root">
                                        <Rectangle x:Name="selectedHighlight"
                                       Width="20" Height="3"
                                       HorizontalAlignment="Center" VerticalAlignment="Bottom" Panel.ZIndex="1"
                                       Fill="{StaticResource PaletteBlueBrush}"
                                       Visibility="Hidden" />
                                        <Border x:Name="Border"
                                    MinWidth="2" MinHeight="40"
                                    Margin="0" Padding="3"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="1,1,1,0" CornerRadius="8,8,8,8">
                                            <ContentPresenter x:Name="ContentSite"
                                                  Margin="0" HorizontalAlignment="Left" VerticalAlignment="Center"
                                                  ContentSource="Header" RecognizesAccessKey="True" />
                                        </Border>

                                        <VisualStateManager.VisualStateGroups>
                                            <VisualStateGroup x:Name="SelectionStates">
                                                <VisualState x:Name="Unselected" />
                                                <VisualState x:Name="Selected" />

                                            </VisualStateGroup>
                                            <VisualStateGroup x:Name="CommonStates">
                                                <VisualState x:Name="Normal" />
                                                <VisualState x:Name="MouseOver">
                                                    <!--<Storyboard>
                                            <ColorAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)"
                To="#80FFFFFF" Duration="0:0:0.3" />
                                        </Storyboard>-->
                                                </VisualState>
                                                <VisualState x:Name="MouseLeave">
                                                    <!--<Storyboard>
                                            <ColorAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)"
To="#00FFFFFF" Duration="0:0:0.3" />
                                        </Storyboard>-->
                                                </VisualState>
                                                <VisualState x:Name="Disabled">
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetName="Border"
                                                             Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Opacity)" From="0.0"
                                                             To="0.5" Duration="0:0:.16" />
                                                    </Storyboard>
                                                </VisualState>
                                            </VisualStateGroup>
                                        </VisualStateManager.VisualStateGroups>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="Panel.ZIndex" Value="100" />
                                            <Setter Property="Foreground" Value="{DynamicResource TabViewItemForegroundSelected}" />
                                            <Setter TargetName="selectedHighlight" Property="Visibility" Value="Visible" />
                                        </Trigger>
                                        <Trigger Property="IsSelected" Value="False">
                                            <Setter TargetName="selectedHighlight" Property="Visibility" Value="Hidden" />

                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="MyRadioButtonStyle"
               BasedOn="{StaticResource {x:Type ToggleButton}}"
               TargetType="RadioButton">
                        <Setter Property="Background" Value="Transparent" />
                        <Setter Property="BorderThickness" Value="0" />
                        <Style.Triggers>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter Property="Background" Value="Transparent" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" Value="#20FFFFFF" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ResourceDictionary>
                

            </ResourceDictionary.MergedDictionaries>
            
        </ResourceDictionary>
    </Application.Resources>
</Application>
