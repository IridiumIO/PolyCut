<Page x:Class="SVGPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:c="clr-namespace:ValueConverters;assembly=ValueConverters"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:i="http://schemas.microsoft.com/xaml/behaviors" xmlns:local="clr-namespace:PolyCut"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:pc="clr-namespace:PolyCut.Core;assembly=PolyCut.Core"
      xmlns:polycutShared="clr-namespace:PolyCut.Shared;assembly=PolyCut.Shared"
      xmlns:rc="clr-namespace:PolyCut.RichCanvas;assembly=PolyCut.RichCanvas"
      xmlns:svg="http://sharpvectors.codeplex.com/runtime/"
      xmlns:svgc="http://sharpvectors.codeplex.com/svgc/"
      xmlns:system="clr-namespace:System;assembly=mscorlib"
      xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
      xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
      x:Name="SVGPageView" Title="SVGPage"
      Margin="0,5,0,0"
      d:DataContext="{d:DesignInstance Type=local:SVGPageViewModel}"
      d:DesignHeight="1000" d:DesignWidth="1000" AllowDrop="True"
      Background="{DynamicResource ControlFillColorTertiaryBrush}"
      Drop="Page_Drop" ScrollViewer.CanContentScroll="False" Unloaded="SVGPageView_Unloaded"
      mc:Ignorable="d">
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded" SourceObject="{Binding ElementName=SVGPageView}">
            <i:InvokeCommandAction Command="{Binding MainVM.MainViewLoadedCommand}" />
        </i:EventTrigger>
        <i:KeyTrigger Key="Delete" SourceObject="{Binding ElementName=zoomPanControl}">
            <i:InvokeCommandAction Command="{Binding DeleteDrawableElementCommand}" />
        </i:KeyTrigger>
        <i:KeyTrigger Key="OemCloseBrackets" SourceObject="{Binding ElementName=zoomPanControl}">
            <i:InvokeCommandAction Command="{Binding PreviewKeyDownCommand}" CommandParameter="]" />
        </i:KeyTrigger>
        <i:KeyTrigger Key="OemOpenBrackets" SourceObject="{Binding ElementName=zoomPanControl}">
            <i:InvokeCommandAction Command="{Binding PreviewKeyDownCommand}" CommandParameter="[" />
        </i:KeyTrigger>
    </i:Interaction.Triggers>


    <Grid Margin="5,5,10,5">

        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="55" MinWidth="55" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="380" MinWidth="380" MaxWidth="800" />
        </Grid.ColumnDefinitions>
        <GridSplitter Width="10"
                      Margin="0,0,-10,0" Panel.ZIndex="1"
                      Background="Transparent" IsTabStop="False" ResizeDirection="Columns" />


        <ui:Card Grid.Column="0"
                 Margin="5,5,0,5" Padding="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                 HorizontalContentAlignment="Center" VerticalContentAlignment="Top">
            <local:ToolSelectorPane x:Name="ToolSelectorPanel" />
        </ui:Card>








        <ui:Card Grid.Column="1"
                 Height="50"
                 Margin="5" Padding="8" HorizontalAlignment="Left" VerticalAlignment="Top"
                 Panel.ZIndex="20"
                 Background="{DynamicResource ControlAltFillColorQuarternaryBrush}"
                 Visibility="{Binding CanvasToolModeIsText, Converter={StaticResource BooleanToVisibilityConverter}}">

            <StackPanel Orientation="Horizontal">
                <Label Content="Font"
                       Margin="0,2,10,0" VerticalAlignment="Center" />
                <local:FontPickerComboBox Width="200" SelectedFont="{Binding CanvasFontFamily, Mode=TwoWay}" />
                <Separator Margin="5,0" />
                <Label Content="Size (pt)"
                       Margin="0,2,10,0" VerticalAlignment="Center" />
                <ComboBox Text="{Binding CanvasFontSize, Mode=OneWayToSource}"
                          Width="80"
                          Padding="7"
                          Background="Transparent" IsEditable="True" SelectedIndex="6">
                    <ComboBoxItem Content="3" />
                    <ComboBoxItem Content="4" />
                    <ComboBoxItem Content="6" />
                    <ComboBoxItem Content="8" />
                    <ComboBoxItem Content="10" />
                    <ComboBoxItem Content="12" />
                    <ComboBoxItem Content="14" />
                    <ComboBoxItem Content="16" />
                    <ComboBoxItem Content="18" />
                    <ComboBoxItem Content="20" />
                    <ComboBoxItem Content="24" />
                    <ComboBoxItem Content="28" />
                    <ComboBoxItem Content="32" />
                    <ComboBoxItem Content="36" />
                    <ComboBoxItem Content="48" />
                    <ComboBoxItem Content="72" />
                </ComboBox>
            </StackPanel>
        </ui:Card>

        <rc:ZoomBorder x:Name="zoomPanControl"
                       Grid.Column="1"
                       Background="Transparent"
                       CanvasMode="{Binding CanvasToolMode, Mode=OneWay}"
                       CanvasTextBox="{Binding CanvasTextBox}"
                       ClipToBounds="True"
                       Cursor="{Binding CanvasToolMode, Converter={StaticResource CanvasToolModeCursorConverter}, Mode=OneWay}"
                       LeftButtonAction="None" MiddleButtonAction="Move" RightButtonAction="Reset"
                       ScaleAmount="0.002" ScaleMax="40" ScaleMin="0.01">


            <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                <AdornerDecorator>
                    <rc:PolyCanvas x:Name="mainCanvas"
                                   Width="{Binding MainVM.Printer.BedWidth, Mode=TwoWay}"
                                   Height="{Binding MainVM.Printer.BedHeight, Mode=TwoWay}"
                                   Margin="0,0,0,0"
                                   Background="Transparent"
                                   ChildrenCollection="{Binding MainVM.DrawableCollection}"
                                   ClipToBounds="False"
                                   IsHitTestVisible="{Binding CanvasToolMode, Converter={StaticResource ComparisonConverter}, ConverterParameter={x:Static polycutShared:CanvasMode.Selection}}" />
                </AdornerDecorator>



                <Canvas Width="{Binding MainVM.Printer.BedWidth, Mode=TwoWay}"
                        Height="{Binding MainVM.Printer.BedHeight, Mode=TwoWay}"
                        Panel.ZIndex="-1"
                        IsHitTestVisible="False">

                    <Border x:Name="DupCuttingMatBounds"
                            Width="{Binding MainVM.Printer.BedWidth, Mode=TwoWay}"
                            Height="{Binding MainVM.Printer.BedHeight, Mode=TwoWay}"
                            Panel.ZIndex="20"
                            IsHitTestVisible="False" Opacity="0">

                        <svgc:SvgCanvas x:Name="DupCuttingMat"
                                        HorizontalAlignment="{Binding MainVM.CuttingMat.SelectedHorizontalAlignment}"
                                        VerticalAlignment="{Binding MainVM.CuttingMat.SelectedVerticalAlignment}"
                                        Source="{Binding MainVM.CuttingMat.QualifiedSVGSource}">
                            <svgc:SvgCanvas.RenderTransform>
                                <TransformGroup>
                                    <RotateTransform Angle="{Binding ElementName=Rotation, Path=SelectedItem}" />
                                    <TranslateTransform X="{Binding ElementName=CuttingMat_RenderTransform, Path=X}" Y="{Binding ElementName=CuttingMat_RenderTransform, Path=Y}" />
                                </TransformGroup>
                            </svgc:SvgCanvas.RenderTransform>
                        </svgc:SvgCanvas>

                    </Border>
                    <Border x:Name="CuttingMatBounds"
                            Width="{Binding MainVM.Printer.BedWidth, Mode=TwoWay}"
                            Height="{Binding MainVM.Printer.BedHeight, Mode=TwoWay}"
                            Background="{Binding CanvasThemeColor}"
                            BorderBrush="#858585" BorderThickness="1" ClipToBounds="True" CornerRadius="0,0,0,0">
                        <svgc:SvgCanvas x:Name="CuttingMat"
                                        Margin="-1"
                                        HorizontalAlignment="{Binding MainVM.CuttingMat.SelectedHorizontalAlignment}"
                                        VerticalAlignment="{Binding MainVM.CuttingMat.SelectedVerticalAlignment}"
                                        EnsureViewboxSize="False"
                                        Source="{Binding MainVM.CuttingMat.QualifiedSVGSource}"
                                        Visibility="{Binding CuttingMatIsVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                            <svgc:SvgCanvas.RenderTransform>
                                <TransformGroup>
                                    <RotateTransform Angle="{Binding ElementName=Rotation, Path=SelectedItem}" />
                                    <TranslateTransform x:Name="CuttingMat_RenderTransform" X="0" Y="0" />
                                </TransformGroup>
                            </svgc:SvgCanvas.RenderTransform>
                        </svgc:SvgCanvas>

                    </Border>


                    <!--  Fill the offset outside space  -->
                    <Path Canvas.Left="0" Canvas.Bottom="0"
                          ClipToBounds="True" IsHitTestVisible="False" StrokeThickness="0.5"
                          Visibility="{Binding WorkingAreaIsVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                        <Path.Data>
                            <CombinedGeometry GeometryCombineMode="Xor">
                                <CombinedGeometry.Geometry1>
                                    <RectangleGeometry Rect="{Binding MainVM.Printer.BedRect}" />
                                </CombinedGeometry.Geometry1>
                                <CombinedGeometry.Geometry2>
                                    <RectangleGeometry Rect="{Binding MainVM.Printer.WorkingRect}" />
                                </CombinedGeometry.Geometry2>
                            </CombinedGeometry>
                        </Path.Data>
                        <Path.Fill>
                            <LinearGradientBrush SpreadMethod="Reflect" StartPoint="0 0" EndPoint="0.01 0.01">
                                <GradientStop Offset="0.5" Color="#30FFFFFF" />
                                <GradientStop Offset="0.5" Color="#40FFFFFF" />
                            </LinearGradientBrush>
                            <!--<SolidColorBrush Color="#40000000"/>-->
                        </Path.Fill>
                        <Path.Stroke>
                            <SolidColorBrush Color="Transparent" />
                        </Path.Stroke>

                        <Path.Effect>
                            <DropShadowEffect BlurRadius="15" Direction="0" RenderingBias="Quality" ShadowDepth="0" />

                        </Path.Effect>
                        <Path.LayoutTransform>
                            <ScaleTransform ScaleY="-1" />
                        </Path.LayoutTransform>
                    </Path>

                </Canvas>


            </Grid>


        </rc:ZoomBorder>



























        <GridSplitter Grid.Column="1"
                      Width="10"
                      Margin="0,0,-10,0" Panel.ZIndex="1"
                      Background="Transparent" IsTabStop="False" ResizeDirection="Columns" />
        <ui:Card Grid.Column="2"
                 Margin="5,5,0,5" VerticalAlignment="Stretch" VerticalContentAlignment="Stretch">
            <ui:Card.Background>
                <SolidColorBrush Color="{StaticResource CardBackgroundFillColorDefault}" />
            </ui:Card.Background>
            <local:MainSidebar x:Name="MainSidebar"/>
       



        </ui:Card>

    </Grid>

</Page>
